description = 'Reactive interface for Apache Kafka'

group = 'reactor.kafka'

allprojects {

    repositories {
        maven { url 'http://repo.spring.io/libs-snapshot' }
        maven { url 'https://repository.apache.org/content/groups/staging' }
        mavenCentral()
    }

}

ext {
    kafkaVersion = '0.10.0.0'
    scalaVersion = '2.11'
    junitVersion = '4.12'
    log4jVersion = '1.2.17'
    reactorVersion = '2.5.0.BUILD-SNAPSHOT'
    argparseVersion = '0.5.0'
    metricsVersion = '2.2.0'
    joptVersion = '4.9'

    assertjVersion = '3.3.0'
    gsCollectionsVersion = '5.0.0'
    springRetryVersion = '1.1.2.RELEASE'
    springVersion = '4.2.5.RELEASE'

    powermockVersion = '1.6.4'
}

subprojects {

    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'checkstyle'
    apply plugin: 'java'

    sourceCompatibility = targetCompatibility = 1.8

    eclipse.project.natures += 'org.springframework.ide.eclipse.core.springnature'

    [compileJava, compileTestJava]*.options*.compilerArgs = ['-Xlint:all,-options']

    sourceSets {
        test {
            resources {
                srcDirs = ['src/test/resources', 'src/test/java']
            }
        }
    }

    test {
        maxHeapSize = "1024m"
        testLogging {
          events "passed", "skipped", "failed"
          //showStandardStreams = true
          exceptionFormat = 'full'
        }
    }

    checkstyle {
        configFile = new File(rootDir, "checkstyle/checkstyle.xml")
    }
    test.dependsOn('checkstyleMain', 'checkstyleTest')

    task srcJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allJava
    }

    artifacts {
        archives srcJar
    }
}

project(':reactor-kafka-api') {
    dependencies {
        compile "org.apache.kafka:kafka-clients:$kafkaVersion"
        compile "io.projectreactor:reactor-core:$reactorVersion"

        testCompile "org.apache.kafka:kafka_$scalaVersion:$kafkaVersion"
        testCompile "org.apache.kafka:kafka-clients:$kafkaVersion:test"
        testCompile "org.apache.kafka:kafka_$scalaVersion:$kafkaVersion:test"
        testCompile "junit:junit:$junitVersion"

        testCompile files("../libs/spring-kafka-test-010.jar")
        testCompile "com.goldmansachs:gs-collections:$gsCollectionsVersion"
        testCompile "org.springframework:spring-test:$springVersion"
        testCompile "org.springframework.retry:spring-retry:$springRetryVersion"
        testCompile "org.assertj:assertj-core:$assertjVersion"
        testCompile "org.powermock:powermock-module-junit4:$powermockVersion"
        testCompile "org.powermock:powermock-core:$powermockVersion"
        testCompile "org.powermock:powermock-api-mockito:$powermockVersion"
    }
}

project(':reactor-kafka-tools') {
    dependencies {
        compile project(':reactor-kafka-api')
        compile "org.apache.kafka:kafka-clients:$kafkaVersion"
        compile "io.projectreactor:reactor-core:$reactorVersion"

        compile "com.yammer.metrics:metrics-core:$metricsVersion"
        compile "net.sf.jopt-simple:jopt-simple:$joptVersion"
        compile "net.sourceforge.argparse4j:argparse4j:$argparseVersion"

        testCompile "junit:junit:$junitVersion"
        testCompile project(':reactor-kafka-api').sourceSets.test.output
        testCompile files("../libs/spring-kafka-test-010.jar")
        testCompile "com.goldmansachs:gs-collections:$gsCollectionsVersion"
        testCompile "org.springframework:spring-test:$springVersion"
        testCompile "org.springframework.retry:spring-retry:$springRetryVersion"
        testCompile "org.assertj:assertj-core:$assertjVersion"
        testCompile "org.powermock:powermock-module-junit4:$powermockVersion"
        testCompile "org.powermock:powermock-core:$powermockVersion"
        testCompile "org.powermock:powermock-api-mockito:$powermockVersion"
    }
}
